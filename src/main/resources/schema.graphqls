type Post {
    id: ID!
    title: String!
    content: String!
    status: Status!
    author: Author!
    comments: [Comment]
}
type Author {
    id: ID!
    name: String!
    age: Int
    posts: [Post]!
    status: Status!
}
type Comment {
    id: ID!
    post: Post
    content: String!
    commenterEmail: String
}

enum Status {
    ACTIVE
    NON_ACTIVE
}


input PostInputRequest {
    title: String!
    content: String!
    authorId: Int!
}

input AuthorInputRequest {
    name: String!
    age: Int
}

input CommentInputRequest{
    postId: Int!
    content:String!
    commenterEmail: String
}
type Mutation {
    newPost(input: PostInputRequest): Post!
    newAuthor(input: AuthorInputRequest): Author!
    newComment(input: CommentInputRequest): Comment!
}
type Query {
    recentPosts(limit: Int, offset: Int, orderBy: String): [Post]
    authorsWithTopPosts: [Author]
    getPostCommentsInPaganition(postId: Int, limit: Int, offset: Int, orderBy: String): [Comment]
}